<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Tech - Category - Joohwan&#39;s blog</title>
        <link>http://jwanp.github.io/categories/tech/</link>
        <description>Tech - Category - Joohwan&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 29 Jun 2025 00:24:25 &#43;0900</lastBuildDate><atom:link href="http://jwanp.github.io/categories/tech/" rel="self" type="application/rss+xml" /><item>
    <title>[React] Managing State</title>
    <link>http://jwanp.github.io/posts/react-managing-state/</link>
    <pubDate>Sun, 29 Jun 2025 00:24:25 &#43;0900</pubDate>
    <author>박주환</author>
    <guid>http://jwanp.github.io/posts/react-managing-state/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/tech/React-managing-state.png" referrerpolicy="no-referrer">
            </div>React에서 State 다루기 React에서 State는 어떤 UI를 보여줄지 결정하는 핵심 요소입니다. 특히 중복되거나 모호한 State는 디버깅이 어렵고, 버그의 원인이 됩니다.
React 공식 문서에서는 상태 변수 관리, 유지보수 방식, 컴포넌트 간 상태 공유 방식 등에 대한 가이드라인을 제공합니다. 이번 글에서는 공식 문서를 참고하여 핵심 원리를 복습하고, 다시 살펴보면 좋을 정보들을 정리했습니다.
Reacting to Input with State 🔗 https://react.dev/learn/reacting-to-input-with-state
UI를 조작하는 방법에는 크게 두 가지가 있습니다: Imperative와 Declarative.
Imperative(명령형): 택시 기사에게 계속 &ldquo;우회전하세요&rdquo;, &ldquo;좌회전하세요&quot;와 같이 명령하는 방식.]]></description>
</item>
<item>
    <title>[React] Lexical 에더터에서 HTML 저장하는 두가지 방법</title>
    <link>http://jwanp.github.io/posts/lexical-save-html-content/</link>
    <pubDate>Thu, 12 Jun 2025 14:39:34 &#43;0900</pubDate>
    <author>박주환</author>
    <guid>http://jwanp.github.io/posts/lexical-save-html-content/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/tech/lexical.webp" referrerpolicy="no-referrer">
            </div>약알고 프로젝트에서는 글 꾸밈 기능을 구현할 때 Meta에서 관리 중인 오픈소스 라이브러리인 Lexical 에디터를 활용하였습니다. React Lexical 에디터에서 내용을 HTML로 저장하는 가장 대표적인 구현 방법은 저장 버튼을 플러그인으로 두는 것입니다. 하지만 버튼 플러그인으로 개발하면 몇 가지 단점이 있습니다.
버튼 플러그인 방식의 단점 1. 해당 버튼의 동작이 특정되어 확장성에 좋지 않음 동일한 에디터를 가져다 쓰되, 저장 버튼의 동작 방식을 다르게 하고 싶을 때가 있습니다. 약알고 서비스도 QnA와 게시물 두 곳에서 같은 에디터를 사용하지만, 두 개의 &lsquo;저장&rsquo; 버튼은 다르게 동작해야 합니다.]]></description>
</item>
<item>
    <title>[React] Adding Interactivity</title>
    <link>http://jwanp.github.io/posts/react-adding-interactivity/</link>
    <pubDate>Sun, 18 May 2025 16:55:10 &#43;0900</pubDate>
    <author>박주환</author>
    <guid>http://jwanp.github.io/posts/react-adding-interactivity/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/tech/React-adding-interactivity.png" referrerpolicy="no-referrer">
            </div>Illustrated by Rachel Lee Nabors
Adding Interactivity React의 함수는 기본적으로 pure해야 한다. 하지만 우리는 사용자의 상호작용에 의해서 함수가 렌더링 된 이후에도 값을 바꾸거나 어떤 동작을 수행하고 싶을때가 있다. 해당 React 공식문서의 Adding Interactivity 파트에서는 이러한 값들을 어디에서 어떻게 처리해야 하는지 알려준다.
대표적으로 event handler들은 purity를 유지할 필요가 없다. 따라서 이러한 event handler 함수 안에 뭔가를 바뀌는 것들을 넣어 주면 좋다. 예를 들어서 타이핑에 따라서 변수의 값을 바꾼다던지, 버튼을 눌렀을때 함수 바깥에 있는 리스트를 바꾸는 등의 행동을 할 수 있다.]]></description>
</item>
<item>
    <title>[React] Describing the UI</title>
    <link>http://jwanp.github.io/posts/react-describing-the-ui/</link>
    <pubDate>Fri, 09 May 2025 09:54:02 &#43;0900</pubDate>
    <author>박주환</author>
    <guid>http://jwanp.github.io/posts/react-describing-the-ui/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/tech/React-describing-the-ui.png" referrerpolicy="no-referrer">
            </div>해당 내용은 React 공식문서 내용을 복습한 것입니다. 읽어보면서 기초적인 내용도 있지만 간과하고 넘어갔던 부분들도 있었습니다. 무엇을 하든지 항상 기초 위에서 하면 좋습니다. 기초가 탄탄하면 복잡한 개념도 더 쉽게 이해할 수 있고, 문제를 해결할 때도 본질에 집중할 수 있기 때문입니다. 특히 React처럼 컴포넌트 중심의 UI 프레임워크에서는 작은 개념 하나하나가 전체 구조와 흐름에 큰 영향을 미칠 수 있으므로, 문서에 나와 있는 기본 개념들을 꼼꼼히 짚고 넘어가는 것이 중요하다고 느꼈습니다.
제가 정리한 내용들은 Describing the UI 섹션에서 다른 분들이 까먹고 지나갔을 법한 내용들, 혹은 다시 상기하면 좋겠다 싶은 내용들을 중심으로 구성했습니다.]]></description>
</item>
<item>
    <title>[Javascript] Dynamic Programming</title>
    <link>http://jwanp.github.io/posts/dynamic-programming/</link>
    <pubDate>Sat, 29 Mar 2025 18:05:00 &#43;0900</pubDate>
    <author>박주환</author>
    <guid>http://jwanp.github.io/posts/dynamic-programming/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/tech/javascript-coding-test/fibo.png" referrerpolicy="no-referrer">
            </div>Made by 박주환
함수 및 개념 정리 Dynamic Programming은 recursive call을 쓸때 memoization을 통해서 실행 시간을 단축시키는 방법을 말합니다.
recursive recursive란 반복되는 계산을 함수에서 자기 자신을 호출함으로 구현하는 방법입니다. 이를 구현하려면 두가지가 필요합니다.
base case: 자기 자신을 호출하면서 가장 깊숙히 들어갔을때 나올 수 있는 탈출구 자기 호출이 포함된 실행문 fibonacci fibonacci란 앞에 있는 두수의 값을 더해서 나오는 수를 의미합니다. ex) fibo = [0, 1, 1, 2, 3, 5, 8, 13]]]></description>
</item>
<item>
    <title>[Javascript] 커스텀 함수로 배열 정렬하기</title>
    <link>http://jwanp.github.io/posts/%EC%BB%A4%EC%8A%A4%ED%85%80-%ED%95%A8%EC%88%98%EB%A1%9C-%EB%B0%B0%EC%97%B4-%EC%A0%95%EB%A0%AC%ED%95%98%EA%B8%B0/</link>
    <pubDate>Sun, 02 Mar 2025 14:01:03 &#43;0900</pubDate>
    <author>박주환</author>
    <guid>http://jwanp.github.io/posts/%EC%BB%A4%EC%8A%A4%ED%85%80-%ED%95%A8%EC%88%98%EB%A1%9C-%EB%B0%B0%EC%97%B4-%EC%A0%95%EB%A0%AC%ED%95%98%EA%B8%B0/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/tech/javascript-coding-test/sorting.jpg" referrerpolicy="no-referrer">
            </div>사진: Unsplash의 Julia Taubitz
함수 및 개념 정리 arr.indexOf(searchElement, fromIndex) arr 배열에서 첫번째로 등장한 searchElement의 index를 반환한다. searchElement를 찾을 수 없다면 -1 을 반환한다. fromIndex부터 찾는다. 출처 : Array.prototype.indexOf() const array = [2, 9, 9]; array.indexOf(2); // 0 array.indexOf(7); // -1 array.indexOf(9, 2); // 2 array.indexOf(2, -1); // -1 array.indexOf(2, -3); // 0 const array = [NaN]; // NaN은 검색할 수 없다. array.indexOf(NaN); // -1 arr.includes(searchElement, fromIndex) arr 배열에서 searchElement가 포함되어 있는지를 반환한다.]]></description>
</item>
<item>
    <title>[Javascript] Capturing Rainwater</title>
    <link>http://jwanp.github.io/posts/capturing-rainwater/</link>
    <pubDate>Thu, 16 Jan 2025 00:16:43 &#43;0900</pubDate>
    <author>박주환</author>
    <guid>http://jwanp.github.io/posts/capturing-rainwater/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/tech/javascript-coding-test/capturing-rainwater.png" referrerpolicy="no-referrer">
            </div>Made by 박주환
함수 및 개념 정리 two pointer two pointer란 배열에서 양쪽의 두개의 포인터가 서로를 향해 이동하면서 문제를 푸는 방법입니다.
배열 문제에서 주로 쓰입니다. 배열의 복사본이 필요하지 않고 한번의 loop(배열의 길이 만큼 == O(n))으로 문제를 풀 수 있습니다. Math.max(요소1, 요소2, &hellip;): 가장 큰것을 반환합니다. console.log(Math.max(1, 3, 2)); // Expected output: 3 console.log(Math.max(-1, -3, -2)); // Expected output: -1 const array1 = [1, 3, 2]; console.log(Math.max(...array1)); // Expected output: 3 출처 while(조건){ 실행문 } : 문장안을 실행하기 전에 조건문을 확인합니다.]]></description>
</item>
<item>
    <title>[Javascript] Sieve of Eratosthenes</title>
    <link>http://jwanp.github.io/posts/sieve-of-eratosthenes/</link>
    <pubDate>Sat, 21 Dec 2024 17:06:52 &#43;0900</pubDate>
    <author>박주환</author>
    <guid>http://jwanp.github.io/posts/sieve-of-eratosthenes/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/tech/javascript-coding-test/%ec%86%8c%ec%88%98%ed%85%8c%ec%9d%b4%eb%b8%94.png" referrerpolicy="no-referrer">
            </div>Made by 박주환
함수 및 개념 정리 문제를 보기전에 필요한 함수들을 살펴 보겠습니다. 기초적인 내용도 포함되어 있지만 다시한번 개념을 명확하게 하고 모르던 함수가 있다면 참고 하시면 좋습니다.
지금 당장 눈에 들어오지 않는다면 문제를보다가 궁금하면 다시 위로 올라와서 공부하는 것이 더 도움이 될 수도 있습니다.
for loop 진행 순서: 항상 조건문을 들렸다가 실행문을 실행합니다. for(1.초기화; 2.조건문; 4.증감식){ 3.실행문 } 초기화 조건문: true 실행문 증감식 조건문: true 실행문 증감식 조건문: false -&gt; break // 예시 for (let i = 2; i &lt;= limit; i++) { 실행문; } 배열 생성 및 초기화하는 방법 : Array().]]></description>
</item>
<item>
    <title>읽기만 해도 도움 되는 Javascript 코딩테스트</title>
    <link>http://jwanp.github.io/posts/%EC%9D%BD%EA%B8%B0%EB%A7%8C-%ED%95%B4%EB%8F%84-%EB%8F%84%EC%9B%80-%EB%90%98%EB%8A%94-javascript-%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8/</link>
    <pubDate>Sat, 21 Dec 2024 15:37:04 &#43;0900</pubDate>
    <author>박주환</author>
    <guid>http://jwanp.github.io/posts/%EC%9D%BD%EA%B8%B0%EB%A7%8C-%ED%95%B4%EB%8F%84-%EB%8F%84%EC%9B%80-%EB%90%98%EB%8A%94-javascript-%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/tech/javascript-coding-test/snow-and-tree.png" referrerpolicy="no-referrer">
            </div>pictured by 박주환 아름다운 눈을 보며 힐링하기 좋은 날씨입니다. 오랜만에 본가에 온 김에, 눈으로 뒤덮인 자연이 아름다워 사진을 찍어봤습니다. 여러분도 가끔 자연을 바라보며 마음의 여유를 가져보세요. 기업들의 코딩테스트 추세 저는 주로 효율이 좋은 Python으로 코딩 테스트를 준비해 왔습니다. 하지만 취업 준비를 하면서 생각보다 많은 회사가 프론트엔드 직무로 지원하면 언어를 Javascript 혹은 Java로 제한하는 경우가 많았습니다. 저의 경우에는 작년에 지원했던 여기어때, 현대 오토에버, 소프티어 부트캠프 등이 있습니다. 그래도 대부분의 회사가 여러 언어를 지원하지만 더 많은 선택지를 가지려면 프론트나 Node개발자 분들은 Javascript으로 준비하는게 더 좋지 않을까 생각합니다.]]></description>
</item>
<item>
    <title>Visual Studio Code --file-write: EPERM 해결</title>
    <link>http://jwanp.github.io/posts/vsc--file-write-error/</link>
    <pubDate>Mon, 22 Jan 2024 10:15:17 &#43;0900</pubDate>
    <author>박주환</author>
    <guid>http://jwanp.github.io/posts/vsc--file-write-error/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/featuredImage/VSC--file-write-Error.png" referrerpolicy="no-referrer">
            </div>잘 작업해 오던 작업 폴더에서 저장이 안된다. 마지막에 branch merge 하고 작업 branch 삭제후 다시 분기했었다. 그 후부터 익숙하지만 좀 더 까다로운 에러가 뜬다.
비번을 입력해도 왜 계속 에러가 뜨지 먼저 저장을 하면 비번을 입력하라고 나온다. 여기까지는 익숙하다. 그리고 비번을 치면 저장이 되어야 하는데&hellip; 또 다시 에러가 뜬다.
이런적은 처음이어서 굉장히 당황스러웠다.
왜 이럴까? 일단 EPERM을 보니 권한 문제인 것 같다. 따라서 폴더의 권한을 나로 바꿔야 하고 구글링을 해서 해결하였다.]]></description>
</item>
</channel>
</rss>
