<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>react - Tag - Joohwan&#39;s blog</title>
        <link>http://jwanp.github.io/tags/react/</link>
        <description>react - Tag - Joohwan&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 12 Jun 2025 14:39:34 &#43;0900</lastBuildDate><atom:link href="http://jwanp.github.io/tags/react/" rel="self" type="application/rss+xml" /><item>
    <title>[React] Lexical 에더터에서 HTML 저장하는 두가지 방법</title>
    <link>http://jwanp.github.io/posts/lexical-save-html-content/</link>
    <pubDate>Thu, 12 Jun 2025 14:39:34 &#43;0900</pubDate>
    <author>박주환</author>
    <guid>http://jwanp.github.io/posts/lexical-save-html-content/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/tech/javascript-coding-test/lexical.webp" referrerpolicy="no-referrer">
            </div>약알고 프로젝트에서는 글 꾸밈 기능을 구현할 때 Meta에서 관리 중인 오픈소스 라이브러리인 Lexical 에디터를 활용하였습니다. React Lexical 에디터에서 내용을 HTML로 저장하는 가장 대표적인 구현 방법은 저장 버튼을 플러그인으로 두는 것입니다. 하지만 버튼 플러그인으로 개발하면 몇 가지 단점이 있습니다.
버튼 플러그인 방식의 단점 1. 해당 버튼의 동작이 특정되어 확장성에 좋지 않음 동일한 에디터를 가져다 쓰되, 저장 버튼의 동작 방식을 다르게 하고 싶을 때가 있습니다. 약알고 서비스도 QnA와 게시물 두 곳에서 같은 에디터를 사용하지만, 두 개의 &lsquo;저장&rsquo; 버튼은 다르게 동작해야 합니다.]]></description>
</item>
<item>
    <title>React로 빌드하고 github pages 로 호스팅 해보았다. (feat. 404에러)</title>
    <link>http://jwanp.github.io/posts/react%EB%A1%9C-%EB%B9%8C%EB%93%9C%ED%95%98%EA%B3%A0-github-pages%EB%A1%9C-%ED%98%B8%EC%8A%A4%ED%8C%85/</link>
    <pubDate>Sat, 20 Jan 2024 14:07:47 &#43;0900</pubDate>
    <author>박주환</author>
    <guid>http://jwanp.github.io/posts/react%EB%A1%9C-%EB%B9%8C%EB%93%9C%ED%95%98%EA%B3%A0-github-pages%EB%A1%9C-%ED%98%B8%EC%8A%A4%ED%8C%85/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/featuredImage/React%eb%a1%9c-%eb%b9%8c%eb%93%9c%ed%95%98%ea%b3%a0-github-pages%eb%a1%9c-%ed%98%b8%ec%8a%a4%ed%8c%85.jpg" referrerpolicy="no-referrer">
            </div>사진: Unsplash의 Roman Synkevych
Github Pages Github Pages는 static site hosting 서비스로 레파지토리에 HTML, CSS, Javascript 파일을 올리면 웹사이트를 배포해 주는 기능이다.
보통은 개인 블로그를 github.io 도메인을 사용하여 배포한다. 내 블로그도 HUGO 라는 Static Site Genegrator 와 Github Pages 를 이용하여 배포하였다. Github Pages를 이용하려면 github.io 도메인을 이용하기 때문에 &lt;username&gt;.github.io 레파지토리는 무조건 있어야 한다. 만드는 법은 여기 참고.
Github Pages가 좋은점은 모든 public 레파지토리를 이 도메인을 사용하여 배포할 수 있다는 점이다.]]></description>
</item>
<item>
    <title>[ESLint, React] 모든 Import 에 Casing 오류가 뜬다</title>
    <link>http://jwanp.github.io/posts/%EB%AA%A8%EB%93%A0-import-%EC%97%90-casing-%EC%98%A4%EB%A5%98%EA%B0%80-%EB%9C%AC%EB%8B%A4/</link>
    <pubDate>Sat, 13 Jan 2024 14:03:59 &#43;0900</pubDate>
    <author>박주환</author>
    <guid>http://jwanp.github.io/posts/%EB%AA%A8%EB%93%A0-import-%EC%97%90-casing-%EC%98%A4%EB%A5%98%EA%B0%80-%EB%9C%AC%EB%8B%A4/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/Tech/202040113-ESLint.webp" referrerpolicy="no-referrer">
            </div>ESLint 에서 모든 import 에 대해서 Casing 오류가 떴다.
Casing of {file name} does not match the underlying filesystem.
stackOverflow 도 보고 ESLint issues 도 봤지만 힌트를 찾지 못했다.
그래서 Chat GPT 에 물어봤다. 답은 다음과 같이 왔다.
Case Sensitivity Check the File System File Extension IDE/File Explorer Case Sensitivity 먼저 Case Sensitivity 는 대소문자 오류이다. ESLint 는 대소문자 구분에 엄격하지만 윈도우 나 WSL 을 사용하면 이것이 구분이 안되는 경우도 있다고 한다.]]></description>
</item>
</channel>
</rss>
