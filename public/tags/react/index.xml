<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>react - Tag - Joohwan&#39;s blog</title>
        <link>http://jwanp.github.io/tags/react/</link>
        <description>react - Tag - Joohwan&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 29 Jun 2025 00:24:25 &#43;0900</lastBuildDate><atom:link href="http://jwanp.github.io/tags/react/" rel="self" type="application/rss+xml" /><item>
    <title>[React] Managing State</title>
    <link>http://jwanp.github.io/posts/react-managing-state/</link>
    <pubDate>Sun, 29 Jun 2025 00:24:25 &#43;0900</pubDate>
    <author>박주환</author>
    <guid>http://jwanp.github.io/posts/react-managing-state/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/tech/React-managing-state.png" referrerpolicy="no-referrer">
            </div>React에서 State 다루기 React에서 State는 어떤 UI를 보여줄지 결정하는 핵심 요소입니다. 특히 중복되거나 모호한 State는 디버깅이 어렵고, 버그의 원인이 됩니다.
React 공식 문서에서는 상태 변수 관리, 유지보수 방식, 컴포넌트 간 상태 공유 방식 등에 대한 가이드라인을 제공합니다. 이번 글에서는 공식 문서를 참고하여 핵심 원리를 복습하고, 다시 살펴보면 좋을 정보들을 정리했습니다.
Reacting to Input with State 🔗 https://react.dev/learn/reacting-to-input-with-state
UI를 조작하는 방법에는 크게 두 가지가 있습니다: Imperative와 Declarative.
Imperative(명령형): 택시 기사에게 계속 &ldquo;우회전하세요&rdquo;, &ldquo;좌회전하세요&quot;와 같이 명령하는 방식.]]></description>
</item>
<item>
    <title>[React] Lexical 에더터에서 HTML 저장하는 두가지 방법</title>
    <link>http://jwanp.github.io/posts/lexical-save-html-content/</link>
    <pubDate>Thu, 12 Jun 2025 14:39:34 &#43;0900</pubDate>
    <author>박주환</author>
    <guid>http://jwanp.github.io/posts/lexical-save-html-content/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/tech/lexical.webp" referrerpolicy="no-referrer">
            </div>약알고 프로젝트에서는 글 꾸밈 기능을 구현할 때 Meta에서 관리 중인 오픈소스 라이브러리인 Lexical 에디터를 활용하였습니다. React Lexical 에디터에서 내용을 HTML로 저장하는 가장 대표적인 구현 방법은 저장 버튼을 플러그인으로 두는 것입니다. 하지만 버튼 플러그인으로 개발하면 몇 가지 단점이 있습니다.
버튼 플러그인 방식의 단점 1. 해당 버튼의 동작이 특정되어 확장성에 좋지 않음 동일한 에디터를 가져다 쓰되, 저장 버튼의 동작 방식을 다르게 하고 싶을 때가 있습니다. 약알고 서비스도 QnA와 게시물 두 곳에서 같은 에디터를 사용하지만, 두 개의 &lsquo;저장&rsquo; 버튼은 다르게 동작해야 합니다.]]></description>
</item>
<item>
    <title>[React] Adding Interactivity</title>
    <link>http://jwanp.github.io/posts/react-adding-interactivity/</link>
    <pubDate>Sun, 18 May 2025 16:55:10 &#43;0900</pubDate>
    <author>박주환</author>
    <guid>http://jwanp.github.io/posts/react-adding-interactivity/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/tech/React-adding-interactivity.png" referrerpolicy="no-referrer">
            </div>Illustrated by Rachel Lee Nabors
Adding Interactivity React의 함수는 기본적으로 pure해야 한다. 하지만 우리는 사용자의 상호작용에 의해서 함수가 렌더링 된 이후에도 값을 바꾸거나 어떤 동작을 수행하고 싶을때가 있다. 해당 React 공식문서의 Adding Interactivity 파트에서는 이러한 값들을 어디에서 어떻게 처리해야 하는지 알려준다.
대표적으로 event handler들은 purity를 유지할 필요가 없다. 따라서 이러한 event handler 함수 안에 뭔가를 바뀌는 것들을 넣어 주면 좋다. 예를 들어서 타이핑에 따라서 변수의 값을 바꾼다던지, 버튼을 눌렀을때 함수 바깥에 있는 리스트를 바꾸는 등의 행동을 할 수 있다.]]></description>
</item>
<item>
    <title>[React] Describing the UI</title>
    <link>http://jwanp.github.io/posts/react-describing-the-ui/</link>
    <pubDate>Fri, 09 May 2025 09:54:02 &#43;0900</pubDate>
    <author>박주환</author>
    <guid>http://jwanp.github.io/posts/react-describing-the-ui/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/tech/React-describing-the-ui.png" referrerpolicy="no-referrer">
            </div>해당 내용은 React 공식문서 내용을 복습한 것입니다. 읽어보면서 기초적인 내용도 있지만 간과하고 넘어갔던 부분들도 있었습니다. 무엇을 하든지 항상 기초 위에서 하면 좋습니다. 기초가 탄탄하면 복잡한 개념도 더 쉽게 이해할 수 있고, 문제를 해결할 때도 본질에 집중할 수 있기 때문입니다. 특히 React처럼 컴포넌트 중심의 UI 프레임워크에서는 작은 개념 하나하나가 전체 구조와 흐름에 큰 영향을 미칠 수 있으므로, 문서에 나와 있는 기본 개념들을 꼼꼼히 짚고 넘어가는 것이 중요하다고 느꼈습니다.
제가 정리한 내용들은 Describing the UI 섹션에서 다른 분들이 까먹고 지나갔을 법한 내용들, 혹은 다시 상기하면 좋겠다 싶은 내용들을 중심으로 구성했습니다.]]></description>
</item>
<item>
    <title>React로 빌드하고 github pages 로 호스팅 해보았다. (feat. 404에러)</title>
    <link>http://jwanp.github.io/posts/react%EB%A1%9C-%EB%B9%8C%EB%93%9C%ED%95%98%EA%B3%A0-github-pages%EB%A1%9C-%ED%98%B8%EC%8A%A4%ED%8C%85/</link>
    <pubDate>Sat, 20 Jan 2024 14:07:47 &#43;0900</pubDate>
    <author>박주환</author>
    <guid>http://jwanp.github.io/posts/react%EB%A1%9C-%EB%B9%8C%EB%93%9C%ED%95%98%EA%B3%A0-github-pages%EB%A1%9C-%ED%98%B8%EC%8A%A4%ED%8C%85/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/featuredImage/React%eb%a1%9c-%eb%b9%8c%eb%93%9c%ed%95%98%ea%b3%a0-github-pages%eb%a1%9c-%ed%98%b8%ec%8a%a4%ed%8c%85.jpg" referrerpolicy="no-referrer">
            </div>사진: Unsplash의 Roman Synkevych
Github Pages Github Pages는 static site hosting 서비스로 레파지토리에 HTML, CSS, Javascript 파일을 올리면 웹사이트를 배포해 주는 기능이다.
보통은 개인 블로그를 github.io 도메인을 사용하여 배포한다. 내 블로그도 HUGO 라는 Static Site Genegrator 와 Github Pages 를 이용하여 배포하였다. Github Pages를 이용하려면 github.io 도메인을 이용하기 때문에 &lt;username&gt;.github.io 레파지토리는 무조건 있어야 한다. 만드는 법은 여기 참고.
Github Pages가 좋은점은 모든 public 레파지토리를 이 도메인을 사용하여 배포할 수 있다는 점이다.]]></description>
</item>
<item>
    <title>[ESLint, React] 모든 Import 에 Casing 오류가 뜬다</title>
    <link>http://jwanp.github.io/posts/%EB%AA%A8%EB%93%A0-import-%EC%97%90-casing-%EC%98%A4%EB%A5%98%EA%B0%80-%EB%9C%AC%EB%8B%A4/</link>
    <pubDate>Sat, 13 Jan 2024 14:03:59 &#43;0900</pubDate>
    <author>박주환</author>
    <guid>http://jwanp.github.io/posts/%EB%AA%A8%EB%93%A0-import-%EC%97%90-casing-%EC%98%A4%EB%A5%98%EA%B0%80-%EB%9C%AC%EB%8B%A4/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/Tech/202040113-ESLint.webp" referrerpolicy="no-referrer">
            </div>ESLint 에서 모든 import 에 대해서 Casing 오류가 떴다.
Casing of {file name} does not match the underlying filesystem.
stackOverflow 도 보고 ESLint issues 도 봤지만 힌트를 찾지 못했다.
그래서 Chat GPT 에 물어봤다. 답은 다음과 같이 왔다.
Case Sensitivity Check the File System File Extension IDE/File Explorer Case Sensitivity 먼저 Case Sensitivity 는 대소문자 오류이다. ESLint 는 대소문자 구분에 엄격하지만 윈도우 나 WSL 을 사용하면 이것이 구분이 안되는 경우도 있다고 한다.]]></description>
</item>
</channel>
</rss>
